{"remainingRequest":"D:\\userManage\\web\\vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\userManage\\web\\vue-new\\src\\views\\sample\\index.vue?vue&type=style&index=0&id=eff86a72&lang=scss","dependencies":[{"path":"D:\\userManage\\web\\vue-new\\src\\views\\sample\\index.vue","mtime":1720529385513},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\css-loader\\dist\\cjs.js","mtime":1702824124103},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1702824126490},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\postcss-loader\\src\\index.js","mtime":1702824125129},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1702824123328},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1702824123341},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":1702824125775}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQojc2VhcmNoIC5lbC1pbnB1dCB7DQogIHdpZHRoOiAyMDBweDsNCiAgbWFyZ2luLXJpZ2h0OiAxMHB4Ow0KfQ0KDQouZWwtZGlhbG9nX193cmFwcGVyIHsNCiAgei1pbmRleDogMTAwMDsNCn0NCg0KLmVsLXRhYmxlIHRoOmxhc3QtY2hpbGQgLmNlbGwgew0KICB0ZXh0LWFsaWduOiBjZW50ZXI7DQp9DQoNCi5lbC10YWJsZS1jb2x1bW4tLWV4cGFuZCB7DQogIHdpZHRoOiA1MHB4ICFpbXBvcnRhbnQ7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCg0KLmVsLWJ1dHRvbi0tZGFuZ2VyIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmNGQ0ZjsNCiAgYm9yZGVyLWNvbG9yOiAjZmY0ZDRmOw0KfQ0KDQouZWwtdGFibGVfX2V4cGFuZC1pY29uIHsNCiAgbWFyZ2luLWxlZnQ6IDEwcHg7DQogIG1hcmdpbi1yaWdodDogMTBweDsNCn0NCg0KLmVsLWZvcm0taXRlbV9fbGFiZWwgew0KICB3aWR0aDogODBweDsNCiAgdGV4dC1hbGlnbjogcmlnaHQ7DQogIHBhZGRpbmctcmlnaHQ6IDEwcHg7DQp9DQoNCi5lbC1idXR0b24tLXNtYWxsIHsNCiAgcGFkZGluZzogNXB4IDEycHg7DQp9DQoNCi5saWtlIHsNCiAgY3Vyc29yOiBwb2ludGVyOw0KICBmb250LXNpemU6IDI1cHg7DQogIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCn0NCg0KLmJ1dHRvbi1yb3cgew0KICBkaXNwbGF5OiBmbGV4Ow0KICAvLyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDs7DQogIG1hcmdpbi1yaWdodDogNXB4Ow0KICBtYXJnaW4tYm90dG9tOiA1cHg7DQp9DQoNCi51cGxvYWQtZGVtbyB7DQogIG1hcmdpbi10b3A6IDIwcHg7DQp9DQoNCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappingsioCA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/sample","sourcesContent":["<template>\r\n  <div class=\"case-set-management\">\r\n    <div>\r\n      <!-- 搜索栏 -->\r\n      <el-card id=\"search\">\r\n        <el-row>\r\n          <el-col :span=\"6\">\r\n            <el-input v-model=\"searchModel.name\" placeholder=\"任务集名\" clearable></el-input>\r\n            <el-button type=\"primary\" round icon=\"el-icon-search\" @click=\"searchSet\">查询</el-button>\r\n          </el-col>\r\n          <!-- 分页组件 -->\r\n\r\n          <!-- <el-pagination :current-page=\"searchModel.pageNo\" :page-sizes=\"[5, 10, 20, 50]\" :page-size=\"searchModel.pageSize\"\r\n              layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\" @size-change=\"handleSizeChange\"\r\n              @current-change=\"handleCurrentChange\" :small=\"true\" >\r\n            </el-pagination> -->\r\n          <el-col :span=\"10\" align=\"right\">\r\n            <template>\r\n              <div>\r\n                <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\"\r\n                  :current-page=\"pagination.currentPage\" :page-sizes=\"pagination.pageSizeOptions\"\r\n                  :page-size=\"pagination.pageSize\" layout=\"total, sizes, prev, pager, next, jumper\"\r\n                  :total=\"pagination.total\">\r\n                </el-pagination>\r\n              </div>\r\n            </template>\r\n          </el-col>\r\n          <el-col :span=\"6\" align=\"right\">\r\n            <el-button type=\"primary\" icon=\"el-icon-plus\" circle @click=\"handleAdd(null)\"></el-button>\r\n          </el-col>\r\n        </el-row>\r\n      </el-card>\r\n\r\n      <!-- 任务集表格 -->\r\n      <el-card>\r\n        <!-- <el-table :data=\"setList\" stripe style=\"width: 100%\" :row-style=\"{ cursor: 'pointer' }\" @row-click=\"handleView\"> -->\r\n        <el-table v-loading=\"loading\" element-loading-text=\"任务处理中,请稍等\" :data=\"setList\" stripe style=\"width: 100%\" :row-style=\"{ cursor: 'pointer' }\"\r\n          @expand-change=\"handleView\">\r\n          <el-table-column type=\"expand\" @row-click=\"handleView\">\r\n            <template slot-scope=\"props\">\r\n              <!-- <el-table :data=\"caseSet\" stripe style=\"width: 80%\"> -->\r\n              <el-table :data=\"taskList\" :default-sort=\"{prop: 'CreatedAt', order: 'descending'}\" @sort-change=\"customSort\">\r\n                <el-table-column v-if=\"false\" prop=\"ID\" label=\"任务ID\"> </el-table-column>\r\n                <el-table-column prop=\"taskName\" label=\"任务名称\" width=\"80\"></el-table-column>\r\n                <!-- <el-table-column prop=\"taskPath\" label=\"任务路径\"width=\"85\">\r\n                  <template slot-scope=\"scope\">\r\n                      <tooltip effect=\"dark\" :content=\"scope.row.taskPath\" placement=\"top\">\r\n                      <span>{{ extractFileName(scope.row) }}</span>\r\n                      </tooltip>\r\n                 </template>\r\n                </el-table-column> -->\r\n                <el-table-column prop=\"sqlLength\" label=\"SQL条数\" width=\"60\">\r\n                  <template slot-scope=\"scope\">\r\n                      <div style=\"text-align: center;\">{{ scope.row.sqlLength }}</div>\r\n                  </template>\r\n                </el-table-column>\r\n                <el-table-column prop=\"taskType\" label=\"任务类型\"></el-table-column>\r\n                <el-table-column prop=\"taskStatus\" label=\"任务状态\" sortable=\"custom\"></el-table-column>\r\n                <el-table-column v-if=\"false\" prop=\"setId\" label=\"业务ID\"> </el-table-column>\r\n                <el-table-column prop=\"CreatedAt\" label=\"创建时间\" :formatter=\"formateDate\" sortable=\"custom\"></el-table-column>\r\n                <el-table-column prop=\"UpdatedAt\" label=\"修改时间\" :formatter=\"formateDate\"></el-table-column>\r\n                <el-table-column prop=\"startTime\" label=\"开始时间\" :formatter=\"formateDate\"></el-table-column>\r\n                <el-table-column prop=\"endTime\" label=\"结束时间\" :formatter=\"formateDate\"></el-table-column>\r\n                <el-table-column label=\"操作\">\r\n                  <template slot-scope=\"scope\">\r\n                    <div class=\"button-row\">\r\n                      <el-tooltip class=\"item\" effect=\"dark\" content=\"开始\" placement=\"top\">\r\n                        <el-button type=\"primary\" class=\"start\" circle size=\"mini\" icon=\"el-icon-video-play\"\r\n                        @click=\"beginMatch(scope.row.ID,scope.row.sqlLength)\"></el-button>\r\n                      </el-tooltip>\r\n                      <el-tooltip class=\"item\" effect=\"dark\" content=\"暂停\" placement=\"top\">\r\n                        <el-button type=\"primary\" circle size=\"mini\" icon=\"el-icon-video-pause\"\r\n                        @click=\"PauseTask(scope.row.ID,scope.row.affairId)\"></el-button>\r\n                      </el-tooltip>\r\n                    </div>\r\n                    <div class=\"button-row\">\r\n                      <el-tooltip class=\"item\" effect=\"dark\" content=\"编辑\" placement=\"top\">\r\n                        <el-button type=\"primary\" circle size=\"mini\" icon=\"el-icon-edit\"\r\n                          @click=\"handleEditTask(scope.row.ID, scope.row.setId)\"></el-button>\r\n                        <!-- <el-button type=\"primary\" circle size=\"mini\" icon=\"el-icon-download\"></el-button> -->\r\n                      </el-tooltip>\r\n                      <el-tooltip class=\"item\" effect=\"dark\" content=\"SQL画像/语法匹配\" placement=\"bottom\">\r\n                        <el-button type=\"primary\" circle size=\"mini\" icon=\"el-icon-s-opportunity\"\r\n                          @click=\"jumphandelMatch(scope.row.ID)\">\r\n                        </el-button>\r\n                      </el-tooltip>\r\n                    </div>\r\n                    <div class=\"button-row\">\r\n                      <el-tooltip class=\"item\" effect=\"dark\" content=\"报告下载\" placement=\"bottom\">\r\n                        <el-button type=\"primary\" circle size=\"mini\" icon=\"el-icon-download\"\r\n                          @click=\"downloadResult(scope.row.ID)\">\r\n                        </el-button>\r\n                      </el-tooltip>\r\n                      <el-tooltip class=\"item\" effect=\"dark\" content=\"删除任务\" placement=\"bottom\">\r\n                        <el-button type=\"danger\" circle size=\"mini\" icon=\"el-icon-delete\"\r\n                          @click=\"deleteTask(scope.row.ID)\">\r\n                        </el-button>\r\n                      </el-tooltip>\r\n                    </div>\r\n\r\n                  </template>\r\n                </el-table-column>\r\n              </el-table>\r\n              <!-- 该任务分页栏 -->\r\n              <template>\r\n                <div>\r\n                  <el-pagination @size-change=\"handleTaskSizeChange\" @current-change=\"handleTaskCurrentChange\"\r\n                    :current-page=\"Taskpagination.currentPage\" :page-sizes=\"Taskpagination.pageSizeOptions\"\r\n                    :page-size=\"Taskpagination.pageSize\" layout=\"total, sizes, prev, pager, next, jumper\"\r\n                    :total=\"Taskpagination.total\">\r\n                  </el-pagination>\r\n                </div>\r\n              </template>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column v-if=\"false\" prop=\"ID\" label=\"任务集ID\" width=\"120\"></el-table-column>\r\n          <el-table-column prop=\"setName\" label=\"任务集名称\" width=\"200\"></el-table-column>\r\n          <el-table-column prop=\"CreatedAt\" label=\"创建时间\" :formatter=\"formateDate\" width=\"200\"></el-table-column>\r\n          <el-table-column prop=\"UpdatedAt\" label=\"修改时间\" :formatter=\"formateDate\" width=\"200\"></el-table-column>\r\n          <el-table-column label=\"操作\" width=\"400\">\r\n            <template slot-scope=\"scope\">\r\n              <el-tooltip class=\"item\" effect=\"dark\" content=\"新建任务\" placement=\"top\">\r\n                <el-button type=\"primary\" icon=\"el-icon-plus\" size=\"small\" circle\r\n                  @click=\"handleAddTask(scope.row.ID)\"></el-button></el-tooltip>\r\n              <el-tooltip class=\"item\" effect=\"dark\" content=\"编辑任务集\" placement=\"top\">\r\n                <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"small\" circle\r\n                  @click=\"handleEditAffair(scope.row.ID)\"></el-button></el-tooltip>\r\n              <el-tooltip class=\"item\" effect=\"dark\" content=\"删除任务集\" placement=\"top\">\r\n                <el-button type=\"danger\" circle size=\"small\" icon=\"el-icon-delete\" @click=\"deleteSet(scope.row.ID)\">\r\n                </el-button></el-tooltip>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n\r\n        <!-- 新增任务集 -->\r\n        <el-dialog :visible.sync=\"dialogVisible\" title=\"新增任务集\" :before-close=\"handleCloseDialog\" width=\"60%\" center\r\n          :destroy-on-close=\"true\">\r\n          <el-form ref=\"addAffairRef\" :model=\"newAffair\" label-width=\"120px\">\r\n            <!-- <el-form-item label=\"任务集ID\" prop=\"id\">\r\n              <el-input v-model=\"newSet.id\"></el-input></el-form-item> -->\r\n            <el-form-item label=\"任务集名称\" prop=\"affairName\">\r\n              <el-input v-model=\"newAffair.affairName\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"任务集描述\" prop=\"affairDesc\">\r\n              <el-input v-model=\"newAffair.affairDesc\"></el-input>\r\n            </el-form-item>\r\n          </el-form>\r\n\r\n          <div slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button @click=\"dialogVisible = false; selectRowId = null; selectTaskId = null\">取 消</el-button>\r\n            <el-button type=\"primary\" @click=\"addSet\">确 定</el-button>\r\n          </div>\r\n        </el-dialog>\r\n\r\n        <!-- 编辑任务集 -->\r\n        <el-dialog :visible.sync=\"editAffairVisible\" :title=\"title\" :before-close=\"handleCloseDialog\" width=\"60%\" center\r\n          :destroy-on-close=\"true\">\r\n          <el-form ref=\"editAffairRef\" :model=\"affairInfo\" label-width=\"120px\">\r\n            <!-- <el-form-item label=\"任务集ID\" prop=\"id\">\r\n              <el-input v-model=\"newSet.id\"></el-input></el-form-item> -->\r\n            <el-form-item label=\"任务集名称\" prop=\"setName\">\r\n              <el-input v-model=\"affairInfo.affairName\"></el-input>\r\n            </el-form-item>\r\n          </el-form>\r\n\r\n          <div slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button @click=\"editAffairVisible = false\">取 消</el-button>\r\n            <el-button type=\"primary\" @click=\"editSet\">确 定</el-button>\r\n          </div>\r\n        </el-dialog>\r\n\r\n        <!-- 添加/编辑任务对话框 -->\r\n        <el-dialog :visible.sync=\"dialogVisiblex\" :title=\"titlex\" :before-close=\"handleCloseDialog\" width=\"60%\" center\r\n          :destroy-on-close=\"true\">\r\n          <el-form ref=\"newTaskRef\" :model=\"newTask\" label-width=\"120px\" enctype=\"multipart/form-data\">\r\n            <!-- <el-form-item label=\"任务ID\" prop=\"id\">\r\n              <el-input v-model=\"newCaseForm.id\"></el-input></el-form-item> -->\r\n            <el-form-item label=\"任务名称\">\r\n              <el-input v-model=\"newTask.taskName\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"任务类型\">\r\n              <el-select v-model=\"newTask.taskType\" placeholder=\"请选择任务类型\">\r\n                <el-option :label=\"MYSQLDRAW\" :value=\"MYSQLDRAW\"></el-option>\r\n                <el-option :label=\"ORACLEDRAW\" :value=\"ORACLEDRAW\"></el-option>\r\n                <el-option :label=\"MYSQLADAPT\" :value=\"MYSQLADAPT\"></el-option>\r\n                <el-option :label=\"ORACLEADAPT\" :value=\"ORACLEADAPT\"></el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"文件位置\">\r\n              <el-upload ref=\"upload\" class=\"upload-demo\" :auto-upload=\"false\" action=\"\" :data=\"{ taskID: uploadTaskID }\"\r\n                :before-upload=\"beforeUpload\"\r\n                :on-success=\"handleFileSuccess\"\r\n                :on-error=\"handleFileError\"\r\n                :on-change=\"handleChange\"\r\n                :on-remove=\"handleRemove\"\r\n                :file-list=\"fileList\"\r\n                :multiple=\"true\"\r\n                drag\r\n                >\r\n                <i class=\"el-icon-upload\"></i>\r\n                <div class=\"el-upload__text\">将文件拖拽到此处，或<em>点击上传</em></div>\r\n\r\n              </el-upload>\r\n            </el-form-item>\r\n          </el-form>\r\n\r\n          <div slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button @click=\"dialogVisiblex = false; selectRowId = null; selectTaskId = null\">取 消</el-button>\r\n            <el-button type=\"primary\" @click=\"addTask\">确 定</el-button>\r\n          </div>\r\n          </el-dialog>\r\n\r\n        <!-- 编辑任务对话框 -->\r\n        <el-dialog :visible.sync=\"dialogEditVisiblex\" :title=\"titlex\" :before-close=\"handleCloseDialog\" width=\"60%\" center\r\n          :destroy-on-close=\"true\">\r\n          <el-form ref=\"newTaskRef\" :model=\"newTask\" label-width=\"120px\" enctype=\"multipart/form-data\">\r\n            <el-form-item label=\"任务名称\">\r\n              <el-input v-model=\"newTask.taskName\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"任务类型\">\r\n              <el-select v-model=\"newTask.taskType\" placeholder=\"请选择任务类型\">\r\n                <el-option :label=\"MYSQLDRAW\" :value=\"MYSQLDRAW\"></el-option>\r\n                <el-option :label=\"ORACLEDRAW\" :value=\"ORACLEDRAW\"></el-option>\r\n                <el-option :label=\"MYSQLADAPT\" :value=\"MYSQLADAPT\"></el-option>\r\n                <el-option :label=\"ORACLEADAPT\" :value=\"ORACLEADAPT\"></el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"文件位置\">\r\n              <el-upload ref=\"upload\" class=\"upload-demo\" :auto-upload=\"false\" :action=\"uploadUrl\" :data=\"{ taskID: uploadTaskID }\"\r\n                :on-success=\"handleFileSuccess\"\r\n                :on-error=\"handleFileError\"\r\n                :before-upload=\"beforeUpload\"\r\n                :limit=\"3\"\r\n                drag\r\n                multiple\r\n                >\r\n                <i class=\"el-icon-upload\"></i>\r\n                <div class=\"el-upload__text\">仅支持后缀为.sql的文件，将文件拖拽到此处，或<em>点击上传</em></div>\r\n\r\n              </el-upload>\r\n            </el-form-item>\r\n          </el-form>\r\n\r\n          <div slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button @click=\"dialogEditVisiblex = false; selectRowId = null; selectTaskId = null\">取 消</el-button>\r\n            <el-button type=\"primary\" @click=\"editTask\">确 定</el-button>\r\n          </div>\r\n        </el-dialog>\r\n\r\n      </el-card>\r\n    </div>\r\n\r\n    <div style=\"margin-top: 30px;\"></div>\r\n    <!-- 任务统计 -->\r\n    <div>\r\n      <h3>任务统计</h3>\r\n      <el-row>\r\n        <el-col :span=\"6\">\r\n        <el-card style=\"height: 120px;background-color: ghostwhite;margin: 0 auto\">\r\n          <div>\r\n            <el-statistic :value=\"allTask\" title=\"全部任务\">\r\n              <template slot=\"formatter\">\r\n\r\n              </template>\r\n            </el-statistic>\r\n          </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <el-col :span=\"6\">\r\n          <el-card style=\"height: 120px;background-color: burlywood;margin: 0 auto\">\r\n          <div>\r\n            <el-statistic :value=\"culing\" :title=\"TASKEVALATE\">\r\n              <template slot=\"formatter\">\r\n\r\n              </template>\r\n            </el-statistic>\r\n          </div>\r\n        </el-card>\r\n        </el-col>\r\n\r\n        <el-col :span=\"6\">\r\n          <el-card style=\"height: 120px;background-color: powderblue; margin: 0 auto\">\r\n          <div>\r\n            <el-statistic :value=\"outed\" :title=\"TASKUNDO\">\r\n              <template slot=\"formatter\">\r\n\r\n              </template>\r\n            </el-statistic>\r\n          </div>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <el-col :span=\"6\">\r\n          <el-card style=\"height: 120px;background-color: mintcream;margin: 0 auto\">\r\n          <div>\r\n            <el-statistic :value=\"finished\" :title=\"TASKFINAL\">\r\n              <template slot=\"formatter\">\r\n\r\n              </template>\r\n            </el-statistic>\r\n          </div>\r\n        </el-card>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport day from 'dayjs'\r\nimport { time } from 'echarts';\r\nimport { mapGetters } from 'vuex'\r\nimport { Tooltip } from 'element-ui'\r\nimport { getToken } from '@/utils/auth';\r\n// import Statistic from 'element-ui';\r\n// Vue.use(Statistic)\r\nexport default {\r\n  data() {\r\n    return {\r\n      dialogEditVisiblex: false,\r\n      MYSQLDRAW:\"SQL画像 MySQL\",\r\n      ORACLEDRAW:\"SQL画像 Oracle\",\r\n      MYSQLADAPT:\"MySQL适配\",\r\n      ORACLEADAPT:\"Oracle适配\",\r\n      TASKFINAL:\"已完成\",\r\n      TASKEVALATE:\"评估中\",\r\n      TASKUNDO:\"未开始\",\r\n      TASKSTOP:\"已停止\",\r\n      SQLDRAWDELAY:15000,\r\n      SQLADAPTDELAY:15000,\r\n      loading: false,\r\n      uploadUrl: \"http://localhost:8000/api/upload\",\r\n      uploadTaskID: 1,\r\n      selectRowId: null,\r\n      selectTaskId: null,\r\n      fileList: [],\r\n      curRowId: null,\r\n      allTask: 10,\r\n      culing: 5,\r\n      outed: 2,\r\n      finished: 7,\r\n      newSet: {\r\n        folder: \"\"\r\n      },\r\n      queryParam: {\r\n        pagesize: 10,\r\n        pagenum: 1,\r\n      },\r\n      TaskqueryParam: {\r\n        pagesize: 10,\r\n        pagenum: 1,\r\n      },\r\n      pagination: {\r\n        currentPage: 1,\r\n        pageSizeOptions: [5, 10, 20, 30, 40],\r\n        pageSize: 10,\r\n        total: 0,\r\n        showSizeChanger: true,\r\n        showTotal: (total) => `共${total}条`,\r\n      },\r\n      Taskpagination: {\r\n        currentPage: 1,\r\n        pageSizeOptions: [5, 10, 20, 30, 40],\r\n        pageSize: 10,\r\n        total: 0,\r\n        showSizeChanger: true,\r\n        showTotal: (total) => `共${total}条`,\r\n      },\r\n      row: \"\",\r\n      dialogVisible: false,\r\n      dialogVisiblex: false,\r\n      editAffairVisible: false,\r\n\r\n      newAffair: {\r\n        affairName: \"\",\r\n        affairDesc: \"\"\r\n      },\r\n      newAffairForm: {\r\n        affairName: \"\",\r\n      },\r\n      newTask: {\r\n        taskName: \"\",\r\n        taskType: \"\",\r\n        taskLocal: \"\",\r\n        taskStatus: \"未开始\",\r\n        files: [],\r\n      },\r\n      dialogTitle: \"\",\r\n      title: \"\",\r\n      titlex: \"\",\r\n      caseSet: {\r\n\r\n      },\r\n      total: 0,\r\n      total1: 0,\r\n      searchModel: {\r\n        pagesize: 10,\r\n        pagenum: 1,\r\n      },\r\n      affairInfo: {\r\n        affairId: 0,\r\n        affairName: ''\r\n      },\r\n      // 任务集合列表数据\r\n      setList: [],\r\n      taskList: [],\r\n      tableCase: {},\r\n      like: true,\r\n      headers: {\r\n        username: '',\r\n        user_id: 0\r\n      },\r\n\r\n    };\r\n  },\r\n  components: {\r\n    Tooltip,\r\n  },\r\n\r\n  created() {\r\n    this.getSetList()\r\n    // this.getTaskList()\r\n    this.getTokenInfo()\r\n    // this.user_id = window.sessionStorage.getItem('user_id')\r\n    // this.headers = {\r\n    //   username: sessionStorage.getItem('username'),\r\n    //   user_id: sessionStorage.getItem('user_id')\r\n    // }\r\n    this.getTaskStatistics()\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getResData: 'data/getResData',  // 获取全局的 resData\r\n      getTaskData: 'task/getTaskData'  // 获取当前任务的画像数据\r\n    })\r\n  },\r\n  methods: {\r\n    getTokenInfo() {\r\n      const token = window.sessionStorage.getItem('token')\r\n      this.$http.get('parse/token', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`, // 将JWT令牌添加到请求头中\r\n          'Content-Type': 'application/json' // 设置请求头为JSON类型\r\n        }\r\n      })\r\n      .then(res => {\r\n        this.headers.username = res.data.username\r\n        this.headers.user_id = res.data.user_id\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching data:', error); \r\n      });\r\n    },\r\n    // 任务表格排序\r\n    customSort(column) {\r\n      const prop = column.prop\r\n      const order = column.order\r\n      if (prop === 'taskStatus') {\r\n        this.taskList.sort((a, b) => {\r\n          const statusOrder = {\r\n            '已完成': 1,\r\n            '评估中': 2,\r\n            '未开始': 3,\r\n            '任务出错':4,\r\n          }\r\n          const aOrder = statusOrder[a.taskStatus]\r\n          const bOrder = statusOrder[b.taskStatus]\r\n          if (order === 'descending') {\r\n            return bOrder - aOrder\r\n          } else {\r\n            return aOrder - bOrder\r\n          }\r\n        })\r\n      } else if (prop === 'CreatedAt') {\r\n        this.taskList.sort((a, b) => {\r\n        const aTime = Date.parse(a.CreatedAt)\r\n        const bTime = Date.parse(b.CreatedAt)\r\n        if (order === 'descending') {\r\n          return bTime - aTime\r\n        } else {\r\n          return aTime - bTime\r\n        }\r\n        })\r\n      }\r\n    },\r\n\r\n    handleChange(file, fileList) {\r\n      this.fileList = fileList\r\n    },\r\n\r\n    handleFileSuccess(response, file, fileList) {\r\n      console.log(\"文件上传成功\", response);\r\n      // 可以在这里处理上传成功后的逻辑，例如更新界面等\r\n    },\r\n    handleFileError(err) {\r\n      console.error(\"文件上传失败\", err);\r\n      // 可以在这里处理上传失败后的逻辑，例如提示用户重新上传等\r\n    },\r\n    beforeUpload(file) {\r\n      console.log(\"进入beforeUpload\")\r\n      if (!this.newTask.files) {\r\n        this.newTask.files = [];\r\n      }\r\n    this.newTask.files.push(file);\r\n    console.log(\"准备上传文件\", file);\r\n  \r\n    },\r\n    handleRemove(file, fileList) {\r\n      this.fileList = fileList;\r\n    },\r\n    // 获取任务集列表\r\n    async getSetList() {\r\n      const token = sessionStorage.getItem('token')\r\n      // console.log(\"=====>\", this.headers)\r\n      const { data: res } = await this.$http.get('sets', {\r\n        params: {\r\n          page_size: this.queryParam.pagesize,\r\n          page_num: this.queryParam.pagenum,\r\n        },\r\n        headers: {\r\n            'Authorization': `Bearer ${token}` // 在请求头中携带 token\r\n        }\r\n      })\r\n      // console.log(\"res===>\", res)\r\n      if (res.status !== 200) {\r\n        this.$message.error(res.message)\r\n      }\r\n\r\n      // console.log(res.data)\r\n      this.setList = res.data\r\n      this.pagination.total = res.total\r\n    },\r\n\r\n    // 获取任务集下的任务列表\r\n    async getTaskList(ID) {\r\n      const { data: res } = await this.$http.get(`task/list/${ID}`, {\r\n        params: { page_size: this.TaskqueryParam.pagesize, page_num: this.TaskqueryParam.pagenum },\r\n      })\r\n      // console.log(res)\r\n      if (res.status !== 200) return this.$message.error(res.message)\r\n      this.taskList = res.data\r\n      this.Taskpagination.total = res.total\r\n      // this.pagination.total = res.total\r\n    },\r\n    // 获取任务状态\r\n    async getTaskStatistics() {\r\n      const token = sessionStorage.getItem('token')\r\n      const res = await this.$http.get('task/statistic', {\r\n        headers: {\r\n              'Authorization': `Bearer ${token}` // 在请求头中携带 token\r\n          }\r\n      })\r\n      // console.log(\"test\")\r\n      // console.log(res)\r\n      if (res.status !== 200) return this.$message.error(res.message)\r\n      this.allTask = res.data.totalCount\r\n      this.culing = res.data.inProgressCount\r\n      this.outed = res.data.notStartedCount\r\n      this.finished = res.data.expiredCount\r\n    },\r\n\r\n    // 只直接显示文件路径中的文件名\r\n    extractFileName(row) {\r\n      const fixedPart = 'D:\\\\GraduationProject\\\\NPU-DatabaseMigration\\\\gin_GraduationProject\\\\web\\\\'\r\n      const fileName = row.taskPath.substring(fixedPart.length)\r\n      return fileName;\r\n    },\r\n\r\n    // 修改日期格式\r\n    formateDate(row, column) {\r\n      let data = row[column.property]\r\n      return data ? day(data).format('YYYY年MM月DD日 HH:mm') : '暂无'\r\n    },\r\n\r\n    // 删除任务集\r\n    deleteSet(id) {\r\n      // console.log(id)\r\n      this.$confirm('提示：请再次确认', '确定要删除该任务集吗？一旦删除，无法恢复', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      })\r\n        .then(async () => {\r\n          try {\r\n            const response = await this.$http.delete(`set/${id}`)\r\n            // console.log(response)\r\n            if (response.status === 200) {\r\n              this.$message.success('删除成功')\r\n              this.getSetList() // 删除成功后刷新用户列表\r\n              this.getTaskStatistics()\r\n              // this.getTaskList()\r\n            } else {\r\n              this.$message.error(response.data.message || '删除失败，请重试')\r\n            }\r\n          } catch (error) {\r\n            this.$message.error('删除失败，请重试')  // ????\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.$message.info('已取消删除')\r\n        });\r\n    },\r\n\r\n    // 更改分页\r\n    handleSizeChange(val) {\r\n      this.pagination.pageSize = val\r\n      // console.log(`每页 ${val} 条, pagesize`, this.pagination.pageSize);\r\n      this.queryParam.pagesize = this.pagination.pageSize\r\n      this.getSetList()\r\n      this.getTaskStatistics()\r\n\r\n    },\r\n    handleCurrentChange(val) {\r\n      this.pagination.currentPage = val\r\n      // console.log(`当前页: ${val}`, this.pagination.currentPage);\r\n      this.queryParam.pagenum = this.pagination.currentPage\r\n      this.getSetList()\r\n      this.getTaskStatistics()\r\n    },\r\n    // 更改任务分页\r\n    handleTaskSizeChange(val) {\r\n      this.Taskpagination.pageSize = val\r\n      // console.log(`每页 ${val} 条, pagesize`, this.pagination.pageSize);\r\n      this.TaskqueryParam.pagesize = this.Taskpagination.pageSize\r\n      this.getTaskList(this.curRowId)\r\n      this.getTaskStatistics()\r\n    },\r\n    handleTaskCurrentChange(val) {\r\n      this.Taskpagination.currentPage = val\r\n      // console.log(`当前页: ${val}`, this.pagination.currentPage);\r\n      this.TaskqueryParam.pagenum = this.Taskpagination.currentPage\r\n      this.getTaskList(this.curRowId)\r\n      this.getTaskStatistics()\r\n    },\r\n    //删除任务\r\n    async deleteTask(id,setid) {\r\n      const res =await this.$http.get(`task/info/${id}`)\r\n      // if (res.data.taskStatus==this.TASKFINAL|| res.data.taskStatus==this.TASKSTOP){\r\n      if (res.data.taskStatus !== this.TASKEVALATE) {\r\n\r\n        // console.log(id)\r\n        this.$confirm('提示：请再次确认', '确定要删除该任务吗？一旦删除，无法恢复', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning',\r\n        })\r\n          .then(async () => {\r\n            try {\r\n              const response = await this.$http.delete(`task/${id}`)\r\n              // console.log(response)\r\n              if (response.status === 200) {\r\n                this.$message.success('删除成功')\r\n                this.getTaskList(setid) // 删除成功后刷新任务列表\r\n                this.getTaskStatistics()\r\n                // this.getTaskList()\r\n              } else {\r\n                this.$message.error(response.data.message || '删除失败，请重试')\r\n              }\r\n            } catch (error) {\r\n              this.$message.error('删除失败，请重试')\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.$message.info('已取消删除')\r\n          });\r\n          \r\n      }else{\r\n        return this.$message.error('任务正在进行，不可删除')\r\n      }\r\n      \r\n    },\r\n\r\n    // 搜索任务集\r\n    async searchSet() {\r\n      const token = sessionStorage.getItem('token')\r\n      // console.log(\"进入searchaffair函数\")\r\n      this.searchModel.pagenum = 1\r\n      this.pagination.currentPage = 1\r\n      this.searchModel.pagesize = this.pagination.pageSize\r\n      const { data: res } = await this.$http.get('set/search', {\r\n        params: {\r\n          page_size: this.searchModel.pagesize,\r\n          page_num: this.searchModel.pagenum,\r\n          set_name: this.searchModel.name,\r\n          // id: sessionStorage.getItem('user_id')\r\n        },\r\n        headers: {\r\n             'Authorization': `Bearer ${token}` // 在请求头中携带 token\r\n        }\r\n      })\r\n\r\n      // console.log(\"aaaa已经得到后端返回的数据：\", res)\r\n      if (res.status !== 200) return this.$message.error(res.message)\r\n      this.setList = res.data\r\n      this.pagination.total = res.total\r\n    },\r\n\r\n    // 编辑任务集合\r\n    async handleEditAffair(id) {\r\n      this.editAffairVisible = true\r\n      const { data: res } = await this.$http.get(`set/${id}`)\r\n      this.affairInfo = res.data\r\n      this.affairInfo.id = id\r\n    },\r\n    editSet() {\r\n      this.$refs.editAffairRef.validate(async (valid) => {\r\n        if (!valid) return this.$message.error('参数不符合要求，请重新输入')\r\n        const { data: res } = await this.$http.put(`set/${this.affairInfo.id}`, {\r\n          setName: this.affairInfo.affairName\r\n        })\r\n        if (res.status != 200) return this.$message.error(res.message)\r\n        this.editAffairVisible = false\r\n        this.$message.success('更新任务集信息成功')\r\n        this.getSetList()\r\n      })\r\n    },\r\n\r\n    jumphandelSql() {\r\n      this.$router.push('/test/result')\r\n    },\r\n    jumphandelDl() {\r\n      this.$router.push('/test/reportdl')\r\n    },\r\n    PauseTask(taskid,setid){\r\n      const res = this.$http.get(`task/pause/${taskid}`)\r\n      this.getSetList()\r\n      this.getTaskList(setid)\r\n      this.getTaskStatistics()\r\n    },\r\n    async beginMatch(id,linenum) {\r\n      this.loading = true\r\n      const res = await this.$http.get(`task/info/${id}`)\r\n      console.log(res.data)\r\n      console.log(\"任务类型为:\", res.data.taskType)\r\n      if (res.data.taskType === this.ORACLEDRAW||res.data.taskType === this.MYSQLDRAW) {\r\n        try {\r\n           const response = await Promise.race([\r\n            // this.$http.get(`sql/draw/${id}`),\r\n            this.$http.get(`sql/addtask/${id}`),\r\n            new Promise((_, reject) => setTimeout(() => reject(new Error('请求超时')), 15000*linenum)) // 设置6*linenum秒超时\r\n           ]);\r\n           if (response.status === 200) {\r\n             this.loading = false\r\n           }\r\n           this.getSetList()\r\n           this.getTaskList()\r\n           this.getTaskStatistics()\r\n           console.log(\"get task:\",response)\r\n        } catch (error) {\r\n          console.error(\"获取sql画像分析结果失败:\", error)\r\n          this.$http.post(`sql/editstatus/${id}`)\r\n        }\r\n      }\r\n      else{\r\n        try{\r\n          console.log(\"time\",)\r\n          const response = await Promise.race([\r\n            // this.$http.get(`sql/adapt/${id}`),\r\n            this.$http.get(`sql/addtask/${id}`),\r\n            new Promise((_, reject) => setTimeout(() => reject(new Error('请求超时')), 15000*linenum)) // 设置10秒超时\r\n          ]);\r\n          console.log(\"Oracle适配的响应\",response)\r\n          if (response.status === 200) {\r\n             this.loading = false\r\n           }\r\n           this.getSetList()\r\n           this.getTaskList()\r\n           this.getTaskStatistics()\r\n        }catch (error) {\r\n          this.$message.error(error)\r\n          console.error(\"获取sql适配分析结果失败:\", error)\r\n          this.$http.post(`sql/editstatus/${id}`)\r\n        }\r\n        \r\n      }\r\n    },\r\n\r\n    async jumphandelMatch(id) {\r\n      const res = await this.$http.get(`task/info/${id}`)\r\n      console.log(\"任务状态为：\", res.data)\r\n      // const taskData = this.$store.getters['task/getTaskData'](id)\r\n      // this.$router.push('/test/match')\r\n      if(res.data.taskType==this.ORACLEDRAW||res.data.taskType==this.MYSQLDRAW){\r\n          if (res.data.taskStatus === this.TASKFINAL) {//页面名称修改\r\n            this.$router.push({name: 'result', params: {taskId: id,taskType:res.data.taskType}})\r\n          } else if (res.data.taskStatus === '未开始') {\r\n            return this.$message.error('任务未开始，不可跳转查看结果')\r\n          }\r\n      }else{\r\n          if (res.data.taskStatus === this.TASKFINAL) {//页面名称为适配的结果修改\r\n            this.$router.push({name: 'match', params: {taskId: id}})\r\n          } else if (res.data.taskStatus === '未开始') {\r\n            return this.$message.error('任务未开始，不可跳转查看结果')\r\n          }\r\n      }\r\n\r\n      // 获取当前任务的任务数据\r\n      const taskData = this.$store.getters['task/getTaskData'](id)\r\n      console.log(\"test\",taskData)\r\n      // if (!taskData) {\r\n      if (1) {\r\n        const response = await this.$http.get(`task/result/${id}`)\r\n        const resultData = JSON.parse(response.data.taskResult)\r\n        await this.$store.dispatch('task/setTaskData', { taskId: id, data: resultData})\r\n      }\r\n    },\r\n    // newTask() {\r\n    //   this.$router.push(\"/test/task\");\r\n    // },\r\n    // openFile() {\r\n    //   this.$refs.folderInput.click();\r\n    // },\r\n    // changeFile(e) {\r\n    //   // const folderPath = e.target.files[0].path; // 获取选择的文件夹路径\r\n    //   const file = e.target.files[0]\r\n    //   console.log(\"拿到的文件为：\", file)\r\n    //   this.newTask.taskLocal = file\r\n    //   // this.newSet.folder = folderPath; // 将路径绑定到数据对象中的属性\r\n    // },\r\n    getCasesById(id) {\r\n      this.getCaseList(id);\r\n    },\r\n    addCase() {\r\n      this.dialogTitle = \"添加任务\";\r\n    },\r\n    handleAdd() {\r\n      this.dialogTitle = \"添加业务合\";\r\n      this.caseSet = {\r\n        id: \"\",\r\n        name: \"\",\r\n        path: \"\",\r\n        cases: [],\r\n      };\r\n      this.dialogVisible = true;\r\n    },\r\n    handleAddTask(id) {\r\n      this.dialogTitlex = \"添加任务\";\r\n      this.dialogVisiblex = true;\r\n      this.selectRowId = id;\r\n    },\r\n    async handleEditTask(id, affairid) {\r\n      const res =await this.$http.get(`task/info/${id}`)\r\n      if (res.data.taskStatus==this.TASKFINAL||res.data.taskStatus==this.TASKSTOP){\r\n        this.title = \"修改任务\";\r\n        this.dialogEditVisiblex = true;\r\n        this.selectRowId = affairid;\r\n        this.selectTaskId = id\r\n      }else if (res.data.taskStatus==this.TASKEVALATE){\r\n        return this.$message.error('任务正在进行，不可编辑')\r\n      }\r\n    },\r\n\r\n    // 业务合表格行点击事件处理函数\r\n    handleView(row) {\r\n      // console.log(\"检测执行handleview\")\r\n      // console.log(row.ID)\r\n      this.curRowId = row.ID\r\n      this.getTaskList(row.ID)\r\n      this.getTaskStatistics()\r\n    },\r\n    // 选择文件夹按钮点击事件处理函数\r\n    handleSelectFolder() {\r\n      const fu = document.getElementById(\"open\");\r\n      if (fu == null) return;\r\n      this.textarea = fu.files[0].name;\r\n      // console.log(fu.files[0].name);\r\n    },\r\n\r\n    // 关闭添加/编辑业务合对话框前的钩子函数\r\n    handleCloseDialog(done) {\r\n      this.$confirm(\"确认关闭？\")\r\n        .then(() => {\r\n          this.selectRowId = null\r\n          this.selectTaskId = null\r\n          done();\r\n        })\r\n        .catch(() => { });\r\n    },\r\n\r\n    // 确定添加/编辑任务集合对话框按钮点击事件处理函数\r\n    addSet() {\r\n      this.$refs.addAffairRef.validate(async (valid) => {\r\n        const token = sessionStorage.getItem('token')\r\n        if (!valid) return this.$message.error('参数不符合要求，请重新输入')\r\n        const { data: res } = await this.$http.post('set/add', {\r\n          setName: this.newAffair.affairName,\r\n          setDesc: this.newAffair.affairDesc,\r\n          // userId: parseInt(sessionStorage.getItem('user_id'), 10)\r\n        }, {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}` // 在请求头中携带 token\r\n        }})\r\n        if (res.status != 200) return this.$message.error(res.message)\r\n        this.$refs.addAffairRef.resetFields()\r\n        this.dialogVisible = false\r\n        this.$message.success('添加成功')\r\n        this.getSetList()\r\n        this.getTaskStatistics()\r\n      })\r\n    },\r\n\r\n    //添加任务\r\n    // addTask() {\r\n    //   // this.$refs.upload.submit();\r\n    //   this.$refs.newTaskRef.validate(async (valid) => {\r\n    //     if (!valid) return this.$message.error('参数不符合要求，请重新输入')\r\n    //     if (this.selectTaskId == null) {\r\n    //       const { data: res } = await this.$http.post('task/add', {\r\n    //         SetId: this.selectRowId,\r\n    //         TaskName: this.newTask.taskName,\r\n    //         TaskPath: this.newTask.taskLocal,\r\n    //         TaskType: this.newTask.taskType,\r\n    //         TaskStatus: this.newTask.taskStatus,\r\n    //       })\r\n    //     if (res.status === 200) {\r\n    //       this.uploadTaskID = res.data.ID\r\n    //       console.log(\"上传任务ID为：\", this.uploadTaskID)\r\n    //       await this.$nextTick()\r\n    //       this.$refs.upload.submit()\r\n    //       this.$message.success('添加成功')\r\n    //     } else {\r\n    //       this.$message.error(res.message)\r\n    //     }\r\n          \r\n    //       this.$refs.newTaskRef.resetFields();\r\n    //       this.dialogVisiblex = false\r\n    //       // console.log(this.selectRowId)\r\n    //       this.getTaskList(this.selectRowId)\r\n    //       this.getTaskStatistics()\r\n    //     }\r\n    //     // else {\r\n    //     //   const id = this.selectTaskId\r\n    //     //   this.selectTaskId = null\r\n    //     //   const { data: res } = await this.$http.put(`task/${id}`, {\r\n    //     //     SetId: this.selectRowId,\r\n    //     //     TaskName: this.newTask.taskName,\r\n    //     //     // TaskPath: this.newTask.taskLocal,\r\n    //     //     TaskType: this.newTask.taskType,\r\n    //     //     TaskStatus: this.newTask.taskStatus,\r\n    //     //   })\r\n\r\n    //     //   console.log(\"修改任务\", this.$refs.upload.uploadFiles.length)\r\n    //     //   if (this.$refs.upload.uploadFiles.length === 1) {\r\n    //     //     this.uploadTaskID = id\r\n    //     //     console.log(\"bfdjsj上传任务ID为：\", this.uploadTaskID)\r\n    //     //     await this.$nextTick()\r\n    //     //     this.$refs.upload.submit()\r\n    //     //   }\r\n    //     //   // if (res.status != 200) return this.$message.error(res.message)\r\n    //     //   // this.$nextTick(() => {\r\n    //     //   //   if (this.$refs.newTaskRef) {\r\n\r\n    //     //   //   }\r\n    //     //   // });\r\n    //     //   this.$refs.newTaskRef.resetFields();\r\n    //     //   this.dialogVisiblex = false\r\n    //     //   this.$message.success('修改成功')\r\n    //     //   // console.log(this.selectRowId)\r\n    //     //   this.getTaskList(this.selectRowId)\r\n    //     //   this.getTaskStatistics()\r\n    //     //   this.selectRowId = null\r\n    //     // }\r\n    //   })\r\n    // },\r\n\r\n    async addTask() {\r\n      this.$refs.newTaskRef.validate(async (valid) => {\r\n      if (!valid) return this.$message.error('参数不符合要求，请重新输入');\r\n\r\n    // 检查是新任务还是已有任务\r\n    if (this.selectTaskId == null) {\r\n      const { data: res } = await this.$http.post('task/add', {\r\n        SetId: this.selectRowId,\r\n        TaskName: this.newTask.taskName,\r\n        TaskPath: this.newTask.taskLocal,\r\n        TaskType: this.newTask.taskType,\r\n        TaskStatus: this.newTask.taskStatus\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        this.uploadTaskID = res.data.ID;\r\n        console.log(\"上传任务ID为：\", this.uploadTaskID);\r\n        await this.$nextTick();\r\n\r\n        const formData = new FormData();\r\n        formData.append('taskID', this.uploadTaskID);\r\n\r\n        \r\n        console.log(\"看看有没有文件\",this.fileList)\r\n        // 将每个文件附加到 formData\r\n        this.fileList.forEach((file) => {\r\n          formData.append('files', file.raw);\r\n        });\r\n\r\n        try {\r\n          const response = await fetch(this.uploadUrl, {\r\n            method: 'POST',\r\n            body: formData\r\n          });\r\n          const result = await response.json();\r\n          console.log(result);\r\n\r\n          if (result.status === 200 || result.status === 3006) {\r\n            this.$message.success(result.message);\r\n          } else {\r\n            this.$message.error(result.message);\r\n          }\r\n        \r\n        } catch (error) {\r\n          console.error('Error:', error);\r\n          this.$message.error('上传失败');\r\n        }\r\n\r\n        this.taskList = []\r\n        this.$refs.newTaskRef.resetFields();\r\n        this.dialogVisiblex = false;\r\n        this.getTaskList(this.selectRowId);\r\n        this.getTaskStatistics();\r\n      } else {\r\n        this.$message.error(res.message);\r\n      }\r\n    }\r\n  });\r\n},\r\n\r\n\r\n    async editTask(){\r\n      const id = this.selectTaskId\r\n      this.selectTaskId = null\r\n      const { data: res } = await this.$http.put(`task/${id}`, {\r\n      SetId: this.selectRowId,\r\n      TaskName: this.newTask.taskName,\r\n      // TaskPath: this.newTask.taskLocal,\r\n      TaskType: this.newTask.taskType,\r\n      TaskStatus: this.newTask.taskStatus,\r\n      })\r\n\r\n      console.log(\"修改任务\", this.$refs.upload.uploadFiles.length)\r\n      if (this.$refs.upload.uploadFiles.length === 1) {\r\n          this.uploadTaskID = id\r\n          console.log(\"bfdjsj上传任务ID为：\", this.uploadTaskID)\r\n          await this.$nextTick()\r\n          this.$refs.upload.submit()\r\n        }\r\n        \r\n        this.$refs.newTaskRef.resetFields();\r\n        this.dialogEditVisiblex = false\r\n        this.$message.success('修改成功')\r\n          // console.log(this.selectRowId)\r\n        this.getTaskList(this.selectRowId)\r\n        this.getTaskStatistics()\r\n        this.selectRowId = null\r\n    },\r\n    \r\n    async downloadResult(id) {\r\n      // window.location.href = `http://localhost:8000/api/download/${id}`\r\n     // 调用接口获取报告数据\r\n     const res = await this.$http.get(`/download/${id}`);\r\n\r\n    if (res.data.status !== 200) {\r\n      this.$message.error(res.data.message)\r\n    } else {\r\n    const taskResult = JSON.parse(res.data.taskResult)\r\n    \r\n    const tableData = Object.values(taskResult)\r\n    console.log(\"tableData\", tableData)\r\n      // 使用获取到的数据动态生成 HTML 内容\r\n    let htmlContent = `\r\n    <html>\r\n      <head>\r\n        <title>${res.data.taskName}</title>\r\n        <style>\r\n        body {\r\n    font-family: Arial, sans-serif;\r\n    margin: 0;\r\n    padding: 20px;\r\n    background-color: #f8f8f8;\r\n  }\r\n  h1, h2 {\r\n    color: #333;\r\n  }\r\n  table {\r\n    border-collapse: collapse;\r\n    width: 100%;\r\n    background-color: #fff;\r\n    margin-top: 20px;\r\n  }\r\n  th, td {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n    text-align: left;\r\n  }\r\n  th {\r\n    background-color: #f2f2f2;\r\n  }\r\n  tr:nth-child(even) {\r\n    background-color: #f2f2f2;\r\n  }\r\n  tr:hover {\r\n    background-color: #ddd;\r\n  }\r\n          </style>\r\n      </head>\r\n    <body>\r\n      <div style=\"margin-bottom: 20px;\">\r\n  <h1 style=\"text-align: center; font-size: 28px; color: #333;\">${res.data.taskName}任务的详情</h1>\r\n  <p style=\"font-size: 20px;\">任务类型：${res.data.taskType}</p>\r\n  <p style=\"font-size: 20px;\">该任务共含有${res.data.sqlLength}条SQL语句</p>\r\n  <p style=\"font-size: 20px;\">适配结果如下：</p>\r\n</div>\r\n      <table>\r\n        <tr>\r\n          <th>对象名</th>\r\n          <th>对象类型</th>\r\n          <th>CBase实现情况</th>\r\n          <th>修改建议</th>\r\n        </tr>\r\n    `;\r\n\r\n    for (const item of tableData) {\r\n      htmlContent += `\r\n      <tr>\r\n        <td>${item.name}</td>\r\n        <td>${item.type}</td>\r\n        <td>${item.status}</td>\r\n        <td>${item.suggestion}</td>\r\n      </tr>\r\n      `;\r\n    }\r\n\r\n    htmlContent += '</table></body></html>';\r\n\r\n    // 创建 blob 对象，并为其设置 MIME 类型为 'text/html'\r\n    const blob = new Blob([htmlContent], { type: 'text/html' });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    // 创建一个临时的 a 标签用于下载\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = 'report.html'; // 指定下载的文件名\r\n    document.body.appendChild(link); // 将 a 标签添加到页面中\r\n    link.click(); // 模拟点击 a 标签\r\n    document.body.removeChild(link); // 移除 a 标签\r\n    URL.revokeObjectURL(url); // 释放 URL 对象\r\n    }\r\n    },\r\n  },\r\n\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n#search .el-input {\r\n  width: 200px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.el-dialog__wrapper {\r\n  z-index: 1000;\r\n}\r\n\r\n.el-table th:last-child .cell {\r\n  text-align: center;\r\n}\r\n\r\n.el-table-column--expand {\r\n  width: 50px !important;\r\n  text-align: center;\r\n}\r\n\r\n.el-button--danger {\r\n  background-color: #ff4d4f;\r\n  border-color: #ff4d4f;\r\n}\r\n\r\n.el-table__expand-icon {\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.el-form-item__label {\r\n  width: 80px;\r\n  text-align: right;\r\n  padding-right: 10px;\r\n}\r\n\r\n.el-button--small {\r\n  padding: 5px 12px;\r\n}\r\n\r\n.like {\r\n  cursor: pointer;\r\n  font-size: 25px;\r\n  display: inline-block;\r\n}\r\n\r\n.button-row {\r\n  display: flex;\r\n  // justify-content: space-around;;\r\n  margin-right: 5px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.upload-demo {\r\n  margin-top: 20px;\r\n}\r\n\r\n</style>\r\n"]}]}