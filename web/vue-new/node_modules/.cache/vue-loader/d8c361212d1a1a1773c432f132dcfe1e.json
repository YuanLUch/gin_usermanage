{"remainingRequest":"D:\\userManage\\web\\vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\userManage\\web\\vue-new\\src\\views\\sys\\role.vue?vue&type=style&index=0&id=3690e6dc&lang=css","dependencies":[{"path":"D:\\userManage\\web\\vue-new\\src\\views\\sys\\role.vue","mtime":1712626992073},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\css-loader\\dist\\cjs.js","mtime":1702824124103},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1702824126490},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\postcss-loader\\src\\index.js","mtime":1702824125129},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1702824123341},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":1702824125775}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi51c2VyLWVkaXQtYnV0dG9ucyB7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIG1hcmdpbi10b3A6IDIwcHg7Cn0K"},{"version":3,"sources":["role.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA;AACA;AACA;AACA","file":"role.vue","sourceRoot":"src/views/sys","sourcesContent":["<template>\n  <el-card>\n    <el-form :model=\"changePassword\" :rules=\"changePasswordRules\" ref=\"changePasswordRef\">\n      <!-- 本想设计在修改密码时验证一遍原密码，原密码经过加密，需要后端先新建密码加密接口，传入新密码加密后返回与原密码比对 -->\n        <el-form-item label=\"原密码\">\n          <el-input v-model=\"changePassword.originpass\" type=\"password\"></el-input>\n        </el-form-item>\n        <el-form-item has-feedback label=\"新密码\" prop=\"password\">\n          <el-input v-model=\"changePassword.password\" type=\"password\"></el-input>\n        </el-form-item>\n        <el-form-item has-feedback label=\"确认密码\" prop=\"checkpass\">\n          <el-input v-model=\"changePassword.checkpass\" type=\"password\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div class=\"user-edit-buttons\">\n        <el-button type=\"primary\" @click=\"changePasswordOk\">确 定</el-button>\n        <el-button type=\"danger\" @click=\"changePasswordCancel\">取 消</el-button>\n      </div>\n  </el-card>\n  \n</template>\n\n<script>\nconst token = sessionStorage.getItem('token')\nexport default {\n  data() {\n    return {\n      originPassword: '',\n      changePassword: {\n        id: 0,\n        originpass: '',\n        password: '',\n        checkPass: '',\n      },\n      changePasswordRules: {\n        originpass: [\n          {\n            validator: (rule, value, callback) => {\n              if (this.changePassword.originpass === '') {\n                callback(new Error('请输入原密码'))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'blur',\n          },\n        ],\n        password: [\n          {\n            validator: (rule, value, callback) => {\n              if (this.changePassword.password == '') {\n                callback(new Error('请输入密码'))\n              }\n              if ([...this.changePassword.password].length < 6 || [...this.changePassword.password].length > 20) {\n                callback(new Error('密码应当在6到20位之间'))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'blur',\n          },\n        ],\n        checkpass: [\n          {\n            validator: (rule, value, callback) => {\n              if (this.changePassword.checkpass == '') {\n                callback(new Error('请输入密码'))\n              }\n              if (this.changePassword.password !== this.changePassword.checkpass) {\n                callback(new Error('密码不一致，请重新输入'))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'blur',\n          },\n        ],\n      },\n    }\n  },\n  created() {\n    this.getUserInfo()\n  },\n  methods: {\n    async getUserInfo() {\n        const token = sessionStorage.getItem('token')\n        const {data:res} = await this.$http.get('user/info', {\n          headers: {\n                'Authorization': `Bearer ${token}` \n          }\n        })\n        this.originPassword = res.data.password\n        // console.log(\"原密码：\", this.originPassword)\n    },\n    async changePasswordOk() {\n      const res = await this.$http.post('scrypt/pass',{\n        originPass: this.changePassword.originpass\n      })\n      const scryptOrigin = res.data.scryPass\n      // console.log(\"加密后的原密码：\", scryptOrigin)\n      this.$refs.changePasswordRef.validate(async (valid) => {\n        const token = sessionStorage.getItem('token')\n        if (!valid) return this.$message.error('参数不符合要求，请重新输入')\n        if (this.originPassword !== scryptOrigin ) {\n          this.$message.error('原密码输入错误')\n        } else {\n          const { data: res } = await this.$http.put('user/changepw', {\n            password: this.changePassword.password,\n          }, {\n            headers: {\n                'Authorization': `Bearer ${token}` \n          }\n        })\n        // console.log(\"修改密码后的res:\", res)\n        if (res.status != 200) return this.$message.error(res.message)\n        this.$message.success('修改密码成功')\n        }\n        \n      })\n    },\n    changePasswordCancel() {\n      this.$refs.changePasswordRef.resetFields()\n      this.$message.info('已取消')\n    },\n  }\n}\n\n</script>\n\n<style>\n.user-edit-buttons {\n  text-align: center;\n  margin-top: 20px;\n}\n</style>\n"]}]}