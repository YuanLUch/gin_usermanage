{"remainingRequest":"D:\\userManage\\web\\vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\userManage\\web\\vue-new\\src\\views\\sys\\user.vue?vue&type=style&index=0&id=368d7532&lang=css","dependencies":[{"path":"D:\\userManage\\web\\vue-new\\src\\views\\sys\\user.vue","mtime":1712626119595},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\css-loader\\dist\\cjs.js","mtime":1702824124103},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1702824126490},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\postcss-loader\\src\\index.js","mtime":1702824125129},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1702824123341},{"path":"D:\\userManage\\web\\vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":1702824125775}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZWRpdC11c2VyLWNvbnRhaW5lcnsKICBtYXJnaW4tdG9wOiA1MHB4Owp9Ci51c2VyLWVkaXQtYnV0dG9ucyB7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIG1hcmdpbi10b3A6IDIwcHg7Cn0KCg=="},{"version":3,"sources":["user.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuHA;AACA;AACA;AACA;AACA;AACA;AACA","file":"user.vue","sourceRoot":"src/views/sys","sourcesContent":["<template>\n<div class=\"edit-user-container\">\n  <!-- <div>\n      用户角色：\n        <span>{{ userInfo.role == '1' ? '用户' : '管理员' }}</span>\n    </div> -->\n  <el-card>\n    <el-form :model=\"userInfo\" :rules=\"userRules\" ref=\"editUserRef\" label-width=\"100px\">\n      <el-form-item label=\"用户名\" prop=\"username\">\n        <el-input v-model=\"userInfo.username\"></el-input>\n      </el-form-item>\n\n    <el-form-item label=\"电话号码\" prop=\"phone_number\">\n      <el-input v-model=\"userInfo.phone_number\"></el-input>\n    </el-form-item>\n\n    <el-form-item label=\"邮箱\" prop=\"email\">\n      <el-input v-model=\"userInfo.email\"></el-input>\n    </el-form-item>\n\n    </el-form>\n   \n    <div class=\"user-edit-buttons\">\n        <el-button type=\"primary\" @click=\"editUserOk\">确 定</el-button>\n        <el-button type=\"danger\" @click=\"editUserCancel\">取 消</el-button>\n    </div>\n  </el-card>\n</div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        userInfo: {\n          username: '',\n          phone_number: '',\n          email: '',\n          role: ''\n        },\n        userRules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n          {\n            validator: (rule, value, callback) => {\n              if (!value) {\n                callback(new Error('请输入用户名'));\n              }\n              if (value.length < 4 || value.length > 12) {\n                callback(new Error('用户名应当在4到12个字符之间'));\n              } else {\n                callback();\n              }\n            },\n            trigger: 'blur',\n          },\n        ],\n        phone_number: [\n          { required: true, message: '请输入手机号', trigger: 'blur' },\n          { pattern: /^1[3|5|7|8|9]\\d{9}$/, message: '请输入正确的号码格式', trigger: 'blur' }\n        ],\n\n        email: [{\n          required: true,//是否必填\n          message: '请输入邮箱地址',      //错误提示信息\n          trigger: 'blur'              //检验方式（blur为鼠标点击其他地方，）\n        },\n        {\n          type: 'email',                       //要检验的类型（number，email，date等）\n          message: '请输入正确的邮箱地址',\n          // trigger: ['blur', 'change']（change为检验的字符变化的时候）\n          trigger: 'blur'\n        }\n        ],\n      },\n      }\n    },\n    created() {\n      this.getUserInfo()\n    },\n    methods: {\n      async getUserInfo() {\n        const token = sessionStorage.getItem('token')\n        const {data:res} = await this.$http.get('user/info', {\n          headers: {\n              'Authorization': `Bearer ${token}` // 在请求头中携带 token\n          }\n        })\n        this.userInfo = res.data\n      },\n      editUserOk() {\n       this.$refs.editUserRef.validate(async (valid) => {\n        const token = sessionStorage.getItem('token')\n        if (!valid) return this.$message.error('参数不符合要求，请重新输入')\n        const { data: res } = await this.$http.put('user/edit', {\n          username: this.userInfo.username,\n          password: this.userInfo.password,\n          phone_number: this.userInfo.phone_number,\n          email: this.userInfo.email,\n          role: this.userInfo.role,\n        }, {\n          headers: {\n                'Authorization': `Bearer ${token}` \n          }\n        })\n        if (res.status != 200) return this.$message.error(res.message)\n        this.$message.success('更新用户信息成功')\n        this.getUserInfo()\n      })\n    },\n    editUserCancel() {\n      this.$refs.editUserRef.resetFields()\n      this.$message.info('编辑已取消')\n    },\n    }\n  }\n</script>\n\n<style>\n.edit-user-container{\n  margin-top: 50px;\n}\n.user-edit-buttons {\n  text-align: center;\n  margin-top: 20px;\n}\n\n</style>"]}]}